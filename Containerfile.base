# Optimized Multi-stage Base Containerfile for Trading System Services
# Eliminates duplication and reduces layer bloat

# Stage 1: Build dependencies and compile requirements
FROM python:3.11-slim as builder

# Install build dependencies and TA-Lib C library in single layer
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    libffi-dev \
    make \
    wget \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install TA-Lib C library
RUN wget -q http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz && \
    tar -xzf ta-lib-0.4.0-src.tar.gz && \
    cd ta-lib/ && \
    ./configure --prefix=/usr --libdir=/usr/lib && \
    make && \
    make install && \
    ldconfig && \
    cd .. && \
    rm -rf ta-lib ta-lib-0.4.0-src.tar.gz

# Create virtual environment for better isolation
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and compile requirements
COPY requirements.in /tmp/
RUN pip install --no-cache-dir pip-tools && \
    pip-compile /tmp/requirements.in --output-file /tmp/requirements.txt && \
    pip install --no-cache-dir -r /tmp/requirements.txt && \
    pip cache purge

# Stage 2: Runtime optimized image
FROM python:3.11-slim as runtime

# Install runtime dependencies and copy TA-Lib library
RUN apt-get update && apt-get install -y \
    libpq5 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy TA-Lib library from builder stage
COPY --from=builder /usr/lib/libta_lib.* /usr/lib/
COPY --from=builder /usr/include/ta-lib/ /usr/include/ta-lib/

# Update library cache
RUN ldconfig

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Create app directory with proper permissions
RUN mkdir -p /app && chown appuser:appuser /app
WORKDIR /app

# Copy shared modules (common across all services)
COPY --chown=appuser:appuser shared/ /app/shared/

# Set optimized environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app
ENV PYTHONDONTWRITEBYTECODE=1

# Switch to non-root user
USER appuser

# Default health check (can be overridden)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import sys; sys.exit(0)" || exit 1

# Default command (to be overridden by services)
CMD ["python", "-c", "print('Base container - override CMD in service Containerfile')"]
